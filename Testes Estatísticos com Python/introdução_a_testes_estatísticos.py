# -*- coding: utf-8 -*-
"""Introdução a Testes Estatísticos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pb3GwnK6313ms7b0Bce0OtMFaa5ozfD_
"""

import pandas as pd

tmdb = pd.read_csv('tmdb_5000_movies.csv')

tmdb.head()

tmdb.describe()

# distplot / densidade (default)
import seaborn as sns

ax = sns.distplot(tmdb.vote_average)
ax.set(xlabel = 'Nota média', ylabel = 'Densidade')
ax.set_title('Média de votos em filmes no TMDB 5000')
ax

# frequência
ax = sns.distplot(tmdb.vote_average, norm_hist = False, kde = False)
ax.set(xlabel = 'Nota média', ylabel = 'Frequência')
ax.set_title('Média de votos em filmes no TMDB 5000')
ax

sns.boxplot(tmdb.vote_average)

ax = sns.boxplot(tmdb.vote_average)
ax.set(xlabel='Nota  média do filme')
ax.set_title('Distribuição de nota média dos filmes do TMDB 5000')

"""Tem algo estranho nos dados. Não faz sentido filmes com nota média 0 ou 10."""

# apenas os filmes com nota média = 0
tmdb.query('vote_average == 0').head()

# apenas os filmes com nota média = 10
tmdb.query('vote_average == 10')

"""Detectamos que alguns filmes tinham poucos votos ou, até mesmo, nenhum voto."""

# selecionando apenas os filmes com mais de 10 votos
tmdb_com_mais_de_10_votos = tmdb.query('vote_count >= 10')
tmdb_com_mais_de_10_votos.describe()

# frequência dos filmes com mais de 10 votos
ax = sns.distplot(tmdb_com_mais_de_10_votos.vote_average, norm_hist = False, kde = False)
ax.set(xlabel = 'Nota média', ylabel = 'Frequência')
ax.set_title('Média de votos em filmes com 10 ou mais votos no TMDB 5000')
ax

# frequência dos filmes com mais de 10 votos
ax = sns.distplot(tmdb_com_mais_de_10_votos.vote_average)
ax.set(xlabel = 'Nota média', ylabel = 'Densidade')
ax.set_title('Média de votos em filmes com 10 ou mais votos no TMDB 5000')
ax

"""Maneira VISUAL de verificar quantos porcentos dos filmes estão acima ou abaixo de determinada nota:"""

# proproção acumulada de filmes
# frequência dos filmes com mais de 10 votos
ax = sns.distplot(tmdb_com_mais_de_10_votos.vote_average,
                  hist_kws = {'cumulative': True},    # parâmetros extras do matplotlib
                  kde_kws = {'cumulative': True})
ax.set(xlabel = 'Nota média', ylabel = '% acumulada de filmes')
ax.set_title('Média acumulada de votos em filmes com 10 ou mais votos do TMDB 5000')
ax

# boxplot dos filmes com 10 ou mais votos, lembra uma distribuição normal
ax = sns.boxplot(tmdb_com_mais_de_10_votos.vote_average)
ax.set(xlabel='Nota  média do filme')
ax.set_title('Distribuição de nota média dos filmes com 10 ou mais votos do TMDB 5000')

"""# Analisaremos as avaliações do movielens"""

notas = pd.read_csv('ratings.csv')
notas.head()

# calculandos as médias das notas
notas_media_por_filme = notas.groupby('movieId')['rating'].mean()
notas_media_por_filme.head()

# frequência dos filmes 
ax = sns.distplot(notas_media_por_filme.values)
ax.set(xlabel = 'Nota média', ylabel = 'Densidade')
ax.set_title('Média de votos em filmes do Movielens 100k')
ax

# apenas filmes com 10 ou mais votos
quantidade_de_votos_por_filme = notas.groupby('movieId').count()
filmes_com_pelo_menos_10_votos = quantidade_de_votos_por_filme.query('rating >= 10').index
filmes_com_pelo_menos_10_votos

# média dos filmes com 10 votos ou mais
nota_media_dos_filmes_com_pelo_menos_10_votos = notas_media_por_filme.loc[filmes_com_pelo_menos_10_votos.values]
nota_media_dos_filmes_com_pelo_menos_10_votos.head()

# frequência dos filmes com mais de 10 votos
ax = sns.distplot(nota_media_dos_filmes_com_pelo_menos_10_votos.values)
ax.set(xlabel = 'Nota média', ylabel = 'Densidade')
ax.set_title('Média de votos em filmes com 10 ou mais votos do Movielens 100k')
ax

"""Maneira VISUAL de verificar quantos porcentos dos filmes estão acima ou abaixo de determinada nota:"""

# proproção acumulada de filmes
# frequência dos filmes com mais de 10 votos
ax = sns.distplot(nota_media_dos_filmes_com_pelo_menos_10_votos.values,
                  hist_kws = {'cumulative': True},    # parâmetros extras do matplotlib
                  kde_kws = {'cumulative': True})
ax.set(xlabel = 'Nota média', ylabel = '% acumulada de filmes')
ax.set_title('Média acumulada de votos em filmes com 10 ou mais votos do Movielens 100k')
ax

# boxplot dos filmes com 10 ou mais votos, lembra uma distribuição normal
ax = sns.boxplot(nota_media_dos_filmes_com_pelo_menos_10_votos.values)
ax.set(xlabel='Nota  média do filme')
ax.set_title('Distribuição de nota média dos filmes com 10 ou mais votos do Movielens 100k')

"""# Analisando a distribuição dos dados capturados de outros campos do TMDB"""

tmdb_com_mais_de_10_votos.head()

# frequência da quantidade de votos - vote_count
ax = sns.distplot(tmdb_com_mais_de_10_votos.vote_count)
ax.set(xlabel = 'Número de votos', ylabel = 'Densidade')
ax.set_title('Número de votos em filmes com 10 ou mais votos do TMDB 5000')
ax

# orçamento
tmdb.budget

# apenas os filmes com orçamento conhecido (> 0)
tmdb.query('budget > 0').budget

# distribuição do orçamento para os filmes com budget > 0
ax = sns.distplot(tmdb.query('budget > 0').budget)
ax.set(xlabel = 'Gastos (budget)', ylabel = 'Densidade')
ax.set_title('Gastos com filmes do TMDB 5000')
ax

# distribuição da popularidade
ax = sns.distplot(tmdb.popularity)
ax.set(xlabel = 'Popularidade', ylabel = 'Densidade')
ax.set_title('Popularidade de filmes do TMDB 5000')
ax

# distribuição do tempo de duração (runtime)
ax = sns.distplot(tmdb.runtime)
ax.set(xlabel = 'Tempo de duração - minutos', ylabel = 'Densidade')
ax.set_title('Duração de filmes do TMDB 5000')
ax

# excluindo valores nulos do tempo de duração dos filmes
tmdb.runtime.dropna()

# distribuição do tempo de duração sem os nulos
ax = sns.distplot(tmdb.runtime.dropna())
ax.set(xlabel = 'Tempo de duração - minutos', ylabel = 'Densidade')
ax.set_title('Duração de filmes do TMDB 5000')
ax

# retirando os tempos de duração == 0
ax = sns.distplot(tmdb.query('runtime > 0').runtime.dropna())
ax.set(xlabel = 'Tempo de duração - minutos', ylabel = 'Densidade')
ax.set_title('Duração de filmes do TMDB 5000')
ax

# distribuição cumulativa
ax = sns.distplot(tmdb.query('runtime > 0').runtime.dropna(),
                  hist_kws = {'cumulative': True},    # parâmetros extras do matplotlib
                  kde_kws = {'cumulative': True})
ax.set(xlabel = 'Tempo de duração - minutos', ylabel = 'Densidade')
ax.set_title('Duração de filmes do TMDB 5000')
ax

# 80% quantile
print('80% dos filmes tem menos de {} minutos de duração.'.format(tmdb.query('runtime > 0').runtime.dropna().quantile(q = 0.8)))

"""# Movielens: média dos filmes com pelo menos 10 votos."""

print('Média das das notas dos filmes com pelo menos 10 votos:', nota_media_dos_filmes_com_pelo_menos_10_votos.mean())

import matplotlib.pyplot as plt
import numpy as np

# adicionar as médias cumulativas, quantos maior a amostra, mais estável
medias = list()

for i in range(1, len(nota_media_dos_filmes_com_pelo_menos_10_votos)):
  medias.append(nota_media_dos_filmes_com_pelo_menos_10_votos[0:i].mean())

plt.plot(medias)

# modificando a ordem (não sabemos se os dados estão numa ordem específica)
medias = list()

np.random.seed(75243)
temp = nota_media_dos_filmes_com_pelo_menos_10_votos.sample(frac=1)

medias = [temp[0:i].mean() for i in range(1, len(temp))]

plt.plot(medias)

"""Intervalo de confiança com teste Z"""

from statsmodels.stats.weightstats import zconfint

# teste z para intervalo com 95% de confiança (usado em amostras grandes: > 30)
zconfint(nota_media_dos_filmes_com_pelo_menos_10_votos)

from statsmodels.stats.weightstats import DescrStatsW

# cria um objeto do tipo statsmodel, usado no teste T (usado em amostras pequenas: <30)
descr_todos_com_10_votos = DescrStatsW(nota_media_dos_filmes_com_pelo_menos_10_votos)

# teste T de intervalo de confiança para 95% de confiança 
descr_todos_com_10_votos.tconfint_mean()

"""# Analisando o Filme 1:"""

filmes = pd.read_csv('movies.csv')
filmes.query('movieId == 1')

notas1 = notas.query('movieId == 1')
notas1.head()

# histograma do Filme 1 (Toy Story)
ax = sns.distplot(notas1.rating)
ax.set(xlabel = 'Nota', ylabel = 'Densidade')
ax.set_title('Distribuição das notas do Filme 1 - Toy Story')
ax

# boxplot do filme 1 - toy story
ax = sns.boxplot(notas1.rating)
ax.set(xlabel='Nota')
ax.set_title('Distribuição das notas do filme 1 - Toy Story')

# confirmamos a mediana = 4
notas1.describe()

# intervalo com 95% de confiança para o teste Z (215 amostras)
zconfint(notas1.rating)

from statsmodels.stats.weightstats import ztest

# novo teste, informando que acreditamos que a nota do ToyStory seja igual à nota média dos filmes
ztest(notas1.rating, value = nota_media_dos_filmes_com_pelo_menos_10_votos.mean())

"""ztest retorna uma tupla com 'teste estatísticos e o p-value'

Como o p-value é muito pequeno, 8,97 x 10^(-18), menor que 0,05, descartamos
a hipótese que a média do Filme 1 (3,92) é igual a média dos filmes (3,43).
"""

# comportamento da médida do Filme 1 ao aumentarmos a amostra
np.random.seed(75241)
temp = notas1.sample(frac=1).rating

medias = [temp[0:i].mean() for i in range(1, len(temp))]
plt.plot(medias)

# média e p-value do z-test a medida que aumentamos a amostra
np.random.seed(75241)
temp = notas1.sample(frac=1).rating

def calcula_teste(i):
  media = temp[0:i].mean()
  stat, p = ztest(temp[0:i], value = nota_media_dos_filmes_com_pelo_menos_10_votos.mean())
  return (i, media, p)

valores = np.array([calcula_teste(i) for i in range(2, len(temp))]) # a partir do 2, não tem como fazer o teste com apenas 1 valor

plt.plot(valores[:, 0] ,valores[:, 1])  #(qntd amostras, média)
plt.plot(valores[:, 0] ,valores[:, 2])  #(qntd amostras, p-value)
plt.hlines(y = 0.05, xmin = -5, xmax = len(temp) + 5, linestyles='--', color = 'g')

"""Nota-se que inicialmente a média é alta e cai para aproximadamente o valor da média das notas. Consequentemente, o p-value se aproxima de 1, pois a amostra é pequena. Entre uma amostra de tamanho 30 e 40, o p-value começa a estabilizar.

## Comparação de dois conjuntos de amostras
"""

# intervalor de confiança entre duas amostras, antes era uma amostra com uma média
print(ztest(notas1.rating, notas.rating))
print(ztest(notas1.rating, nota_media_dos_filmes_com_pelo_menos_10_votos))
zconfint(notas1.rating, notas.rating)

# intervalo de confiança entre duas notas:
print('A média de Toy Story está entre {} e {} mais alta que a média dos filmes.'.format(zconfint(notas1.rating, notas.rating)[0], zconfint(notas1.rating, notas.rating)[1]))

from scipy.stats import ttest_ind

# t-test entre duas amostras usando ttest_ind da scipy.stats
ttest_ind(notas1.rating, notas.rating)

# intervalo de confiança pelo statsmodel - t-test
descr_todas_notas = DescrStatsW(notas.rating)
descr_toy_story = DescrStatsW(notas1.rating)
comparacao = descr_todas_notas.get_compare(descr_toy_story)   # comparando as médias
print(comparacao.summary())
print(comparacao.summary(use_t = False))

"""## Boxplot"""

import matplotlib.pyplot as plt

# comparando os boxplot de todos os filmes com Toy Story
fig = plt.figure(figsize = (5, 4))
eixo = fig.add_axes([0, 0, 1, 1])

eixo.boxplot([notas.rating, notas1.rating])
eixo.set_title('Comparação entre Toy Story e demais filmes', fontsize = 15, pad = 10)
eixo.set_xticklabels(['Todas as notas', 'Toy Story'], fontsize = 12)
eixo.set_ylabel('Notas')
eixo.axhline(notas1.rating.median(), color = 'g', linestyle = '--')
eixo.axhline(notas.rating.median(), color = 'b', linestyle = '--')

# comparando as notas com amostras pequenas
fig = plt.figure(figsize = (5, 4))
eixo = fig.add_axes([0, 0, 1, 1])

eixo.boxplot([notas.rating, notas1[3:12].rating])
eixo.set_title('Comparação entre Toy Story e demais filmes', fontsize = 15, pad = 10)
eixo.set_xticklabels(['Todas as notas', 'Toy Story (3 ao 12)'], fontsize = 12)
eixo.set_ylabel('Notas')
# eixo.axhline(notas1.rating.median(), color = 'g', linestyle = '--')
# eixo.axhline(notas.rating.median(), color = 'b', linestyle = '--')

# test t para uma amostra pequena
descr_todas_notas = DescrStatsW(notas.rating)
descr_toy_story = DescrStatsW(notas1[3:12].rating)
comparacao = descr_todas_notas.get_compare(descr_toy_story)   # comparando as médias
print(comparacao.summary())

"""# Comparar a média de dois filmes"""

filmes.query('movieId in [1, 593, 72226]')

# comparando as notas com amostras pequenas
notas1 = notas.query('movieId == 1')
notas593 = notas.query('movieId == 593')
notas72226 = notas.query('movieId == 72226')

fig = plt.figure(figsize = (6, 4))
eixo = fig.add_axes([0, 0, 1, 1])

eixo.boxplot([notas1.rating, notas593.rating, notas72226.rating])
eixo.set_title('Distribuição das notas de acordo com os filmes', fontsize = 15, pad = 10)
eixo.set_xticklabels(['Toy Story', 'The Silence of the Lambs', 'Fantastic Mr. Fox'], fontsize = 12)
eixo.set_ylabel('Notas')

# boxplot pela seaborn
fig = plt.figure(figsize = (10, 5))
ax = fig.add_axes([0, 0, 1, 1])

ax = sns.boxplot(x = 'movieId', y = 'rating', data = notas.query('movieId in (1, 593, 72226)'))
ax.set_xlabel('Filme', fontsize = 15)
ax.set_ylabel('Notas', fontsize = 15)
ax.set_title('Distribuição das notas de acordo com os filmes', fontsize = 18)
ax.set_xticklabels(['Toy Story', 'The Silence of the Lambs', 'Fantastic Mr. Fox'], fontsize = 12)
ax

# test t: comparação entre filme 1 e filme 593
descr_1 = DescrStatsW(notas1.rating)
descr_593 = DescrStatsW(notas593.rating)
comparacao = descr_1.get_compare(descr_593)   # comparando as médias
print(comparacao.summary())

# test t: comparação entre filme 72226 e filme 593
descr_72226 = DescrStatsW(notas72226.rating)
descr_593 = DescrStatsW(notas593.rating)
comparacao = descr_72226.get_compare(descr_593)   # comparando as médias
print(comparacao.summary())

"""O intervalo inclui tanto a chance do filme ser pior como melhor.
P>|t| muito alto, ou seja, não há diferença significativa.
"""

comparacao = descr_1.get_compare(descr_72226)   # comparando as médias
print(comparacao.summary())

"""Há diferenças significativas apenas entre filme 1 - Toy Story - e o filme 593 - The Silence of the Lambs. Realizando as demais comparações, não podemos dizer qual filme é melhor ou pior."""

# Contabilizando os 3 filmes
notas.query('movieId in (1, 593, 72226)').groupby('movieId').count()

"""Filme 72226 - Fantastic Mr. Fox - possui amostra pequena, o certo é realizar o T-test."""

from scipy.stats import normaltest

# teste de normalidade da distribuição
stat, p = normaltest(notas1.rating)

print(stat, p)

"""Como o p-value é bem menor que 0,05, descartamos a hipótese nula, logo nossos dados não possuem uma distribuição normal.

Os teste T e Z necessitam de uma distribuição normal para serem aplicados.

Assim, aplicaremos um teste não paramétrico para distribuição desconhecida:
"""

from scipy.stats import ranksums

# teste ranksums entre Toy Story e The Silence of the Lambs
stat, p = ranksums(notas1.rating, notas593.rating)
print(stat, p)

"""A hipótese nula do teste 'ranksums' é que as duas amostras são extraídos da mesma distribuição.
A hipótese alternativa é que os VALORES (e não a média, como seria numa distribuição NORMAL) de uma distribuição são maiores que os VALORES da outra.

Neste caso acima, descartamos a hipótese nula, logo concluímos que provavelmente uma nota aleatória - e não a média, como seria numa distribuição NORMAL - de The Silence of the Lambs seria maior que uma nota aleatória de Toy Story.
"""