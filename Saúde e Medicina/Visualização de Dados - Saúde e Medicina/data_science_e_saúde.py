# -*- coding: utf-8 -*-
"""Data Science e Saúde.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Quj_JHbXAFBrdnRGPi4tr19Zcrscig71
"""

import pandas as pd

confirmed = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')

confirmed.head()

confirmed['Country/Region'].unique()

confirmed['Province/State'].unique()

confirmed.iloc[0]

# armazenando a data mais atual (última)
last_date = '6/14/21'

confirmed['Country/Region'].value_counts()

# valor falso pois o erro é muito grande
# descartaremos esta análise pois tem muito campo vazio (muita disparidade no padrão)
confirmed['Country/Region'].value_counts()

confirmed_by_country = confirmed.groupby('Country/Region').sum()
confirmed_by_country.head()

confirmed_by_country.loc["China"][2:]

import matplotlib.pyplot as plt

# casos confirmados cumulativos na China
# compara o momento inicial ao momento atual

plt.figure(figsize = (12, 6))
confirmed_by_country.loc["China"][2:].plot()
plt.xlabel('Data', fontsize = 14)
plt.ylabel('Total de casos confirmados', fontsize = 14)
plt.title('Casos confirmados na China', fontsize = 18)
plt.show()

# limitando o eixo y
# mensagem ruim a quem está visualizando o gráfico

plt.figure(figsize = (12, 6))
confirmed_by_country.loc["China"][2:].plot()
plt.xlabel('Data', fontsize = 14)
plt.ylabel('Visualização errada dos casos na China - desproporciponal', fontsize = 14)
plt.ylim(40000, 90000)
plt.title('Casos confirmados na China', fontsize = 18)
plt.show()

# mensagem ruim a quem está visualizando o gráfico
# compara o momento inicial com 300 mil

plt.figure(figsize = (12, 6))
confirmed_by_country.loc["China"][2:].plot()
plt.xlabel('Data', fontsize = 14)
plt.ylabel('Total de casos confirmados', fontsize = 14)
plt.ylim(0, 300000)
plt.title('Visualização errada dos casos na China - desproporciponal', fontsize = 18)
plt.show()

# casos confirmados por dia na China
new_cases_china = confirmed_by_country.loc["China"][2:].diff().dropna()

new_cases_china.describe()

# gráfico dos casos diários na China
plt.figure(figsize = (12, 6))
new_cases_china.plot()

plt.xlabel('Data', fontsize = 14)
plt.ylabel('Quantidade de casos', fontsize = 14)
plt.title('Casos diários confirmados na China', fontsize = 18)
plt.show()

# últimos casos confirmados em cada país
plt.figure(figsize = (14, 7))
confirmed_by_country[last_date].plot()

plt.xlabel('Data', fontsize = 14)
plt.ylabel('Quantidade de casos', fontsize = 14)
plt.title('Casos confirmados em todos os países no dia {}'.format(last_date), fontsize = 18)
plt.show()

# QUASE SEMPRE DEVEMOS EVITAR GRÁFICO DE PIZZA
# últimos casos confirmados em cada país
plt.figure(figsize = (15, 7))
confirmed_by_country[last_date].plot(kind = 'pie')

plt.xlabel('Data', fontsize = 14)
plt.ylabel('Quantidade de casos', fontsize = 14)
plt.title('Casos confirmados em todos os países no dia {}'.format(last_date), fontsize = 18)
plt.show()

#gráfico de barra
# últimos casos confirmados em cada país
plt.figure(figsize = (15, 7))
confirmed_by_country[last_date].plot(kind = 'bar')

plt.xlabel('Data', fontsize = 14)
plt.ylabel('Quantidade de casos', fontsize = 14)
plt.title('Casos confirmados em todos os países no dia {}'.format(last_date), fontsize = 18)
plt.show()

# ordenando os valores
# últimos casos confirmados em cada país
plt.figure(figsize = (15, 7))
confirmed_by_country[last_date].sort_values(ascending = False).plot(kind = 'bar')

plt.xlabel('Data', fontsize = 14)
plt.ylabel('Quantidade de casos', fontsize = 14)
plt.title('Casos confirmados em todos os países no dia {}'.format(last_date), fontsize = 18)
plt.show()

# ordenando os valores
# últimos casos confirmados em cada país
plt.figure(figsize = (15, 7))
confirmed_by_country[last_date].sort_values(ascending = False)[0:10].plot(kind = 'bar')

plt.xlabel('Data', fontsize = 14)
plt.ylabel('Quantidade de casos', fontsize = 14)
plt.title('Os 10 países com mais casos cumulativos confirmados no dia {}'.format(last_date), fontsize = 18)
plt.show()

# casos confirmados cumulativos na Brasil
plt.figure(figsize = (10, 5))
confirmed_by_country.loc["Brazil"][2:].plot()
plt.xlabel('Data', fontsize = 14)
plt.ylabel('Casos confirmados', fontsize = 14)
plt.title('Total de casos confirmados no Brasil', fontsize = 18)
plt.show()

# mortos e recuperados no mundo
deaths = pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
recovered = pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")

# casos de morte e recuperados no mundo
deaths_by_country = deaths.groupby('Country/Region').sum()
recovered_by_country = recovered.groupby('Country/Region').sum()

display(recovered.head())
display(deaths.head())

# função que retorna a última data agrupada por país
def latest_by_country(data):
  return data.groupby('Country/Region').sum().iloc[:,-1]

display(latest_by_country(confirmed))
display(latest_by_country(deaths))
display(latest_by_country(recovered))

# chamando a função e colocando num DataFrame
informations = [latest_by_country(confirmed), latest_by_country(deaths), latest_by_country(recovered)]
combined = pd.concat(informations, axis = 1)
combined.columns = ['confirmed', 'deaths', 'recovered']
combined

"""## Taxa de letalidade:"""

# taxa de letalidade expressa em porcentagem %
# muito difícil falar em letalidade de uma doença durante uma pandemia
sum_up = combined.sum()
letality_rate_1 = sum_up['deaths'] / sum_up['confirmed']
letality_rate_2 = sum_up['deaths'] / (sum_up['deaths'] + sum_up['recovered'])
print('A primeira estimativa (otimista) da taxa de letalidade é: {:.3f}%'.format(letality_rate_1 * 100))
print('A segunda estimativa (pessimista) da taxa de letalidade é: {:.3f}%'.format(letality_rate_2 * 100))

# função que retorna uma data específica agrupada por país
def latest_by_country_at(data, date):
  return data.groupby('Country/Region').sum()[date]

# chamando a função e colocando num DataFrame
informations = [latest_by_country_at(confirmed, '2/20/20'), latest_by_country_at(deaths, '2/20/20'), latest_by_country_at(recovered, '2/20/20')]
combined_2_20_20 = pd.concat(informations, axis = 1)
combined_2_20_20.columns = ['confirmed', 'deaths', 'recovered']


# taxa de letalidade expressa em porcentagem %
# muito difícil falar em letalidade de uma doença durante uma pandemia
sum_up = combined_2_20_20.sum()
letality_rate_1 = sum_up['deaths'] / sum_up['confirmed']
letality_rate_2 = sum_up['deaths'] / (sum_up['deaths'] + sum_up['recovered'])
print('A primeira estimativa (otimista) da taxa de letalidade é: {:.3f}%'.format(letality_rate_1 * 100))
print('A segunda estimativa (pessimista) da taxa de letalidade é: {:.3f}%'.format(letality_rate_2 * 100))

# usando uma data anterior de confirmados como referência
def latest_by_country_at(data, date):
  return data.groupby('Country/Region').sum()[date]

# chamando a função e colocando num DataFrame: DATA ANTERIOR
informations = [latest_by_country_at(confirmed, '2/8/20'), latest_by_country_at(deaths, '2/20/20'), latest_by_country_at(recovered, '2/20/20')]
combined_12 = pd.concat(informations, axis = 1)
combined_12.columns = ['confirmed', 'deaths', 'recovered']


# taxa de letalidade expressa em porcentagem %
# muito difícil falar em letalidade de uma doença durante uma pandemia
sum_up = combined_12.loc['China']
letality_rate_3 = sum_up['deaths'] / sum_up['confirmed']
print('A primeira estimativa (otimista) da taxa de letalidade é: {:.3f}%'.format(letality_rate_3 * 100))
display(sum_up)

# letalidade por país
letality_rate_1 = 100 * combined['deaths'] / combined['confirmed']
letality_rate_2 = 100 * combined['deaths'] / (combined['deaths'] + combined['recovered'])
combined['letality_rate_1'] = letality_rate_1
combined['letality_rate_2'] = letality_rate_2
combined.head()

# ordenando por taxa de  letalidade
combined.sort_values('letality_rate_1', ascending = False).head(10)

# péssima forma de visualizar, casos confirmados >>> taxa de letalidade (quase 0)
combined[['confirmed', 'letality_rate_1']].plot(figsize = (14, 6))

import seaborn as sns

# scatterplot
plt.figure(figsize = (12, 6))
sns.scatterplot(data = combined, x = 'confirmed', y = 'letality_rate_1')

# apenas os países com mais de 40 casos confirmados
plt.figure(figsize = (12, 6))
sns.scatterplot(data = combined.query('confirmed > 500'), x = 'confirmed', y = 'letality_rate_1')

# letality_rate_2
plt.figure(figsize = (12, 6))
sns.scatterplot(data = combined.query('recovered > 40'), x = 'confirmed', y = 'letality_rate_2')

# distribuição
plt.figure(figsize = (12, 6))
sns.distplot(combined.query('confirmed > 40')['letality_rate_1'], kde = False)

# distribuição
plt.figure(figsize = (12, 6))
sns.distplot(combined.query('recovered > 500')['letality_rate_2'], kde = False)

combined.sort_values('letality_rate_1', ascending = False).query('confirmed > 40').head(10)

"""# Segunda Parte"""

# selecionando apenas a China
confirmed.set_index('Country/Region').loc['China'].sum().tail()

# selecionando se é China
is_china = confirmed['Country/Region'] == 'China'
is_china.head()

# adicionando coluna 'is_china' ao DF
confirmed['is_china'] = is_china
confirmed.head()

# query para selecionar apenas a China
confirmed.query('is_china').head()

# plot no dia que foi gravao o curso
confirmed.groupby('is_china').sum()['3/2/20'].plot(kind = 'pie', labels = ['Mundo', 'China'])
plt.title('Total de casos na China e no resto do mundo no dia 3/2/20.', fontsize = 18)
plt.show()

# plotando apenas para Chinia ou não
confirmed.groupby('is_china').sum()['3/2/20'].plot(kind = 'bar')
plt.title('Total de casos nos China e no resto do mundo no dia {}.'.format('3/2/20'), fontsize = 18)
plt.xticks([False, True], ['Mundo', 'China'], rotation = 0)
plt.show()

# plot no dia que foi gravao o curso
confirmed.groupby('is_china').sum()[last_date].plot(kind = 'pie', labels = ['Mundo', 'China'])
plt.title('Total de casos nos China e no resto do mundo no dia {}.'.format(last_date), fontsize = 18)

# plotando apenas para Chinia ou não
confirmed.groupby('is_china').sum()[last_date].plot(kind = 'bar')
plt.title('Total de casos nos China e no resto do mundo no dia {}.'.format(last_date), fontsize = 18)
plt.xticks([False, True], ['Mundo', 'China'], rotation = 0)
plt.show()

# selecionando se é US
is_us = confirmed['Country/Region'] == 'US'
confirmed['is_us'] = is_us
confirmed.head()

# plotando apenas para US ou não
confirmed.groupby('is_us').sum()[last_date].plot(kind = 'pie', labels = ['Mundo', 'EUA'])
plt.title('Total de casos nos EUA e no resto do mundo no dia {}.'.format(last_date), fontsize = 18)

plt.show()

# plotando apenas para US ou não
confirmed.groupby('is_us').sum()[last_date].plot(kind = 'bar')
plt.title('Total de casos nos EUA e no resto do mundo no dia {}.'.format(last_date), fontsize = 18)
plt.xticks([False, True], ['Mundo', 'EUA'], rotation = 0)
plt.show()

# crescimento do dia 3/1/20 ao dia 3/2/20 na China e no mundo
summed = confirmed.groupby('is_china').sum()
summed['delta'] = summed['3/2/20'] - summed['3/1/20']
summed['delta'].plot(kind = 'bar')
plt.title('Total de casos confirmados na China e no resto do mundo no dia 3/2/20.', fontsize = 18)
plt.xticks([False, True], ['China', 'Mundo'], rotation = 0)
plt.show()

# crescimento do dia 6/13/21 ao dia 6/14/21 na China e no mundo
summed_atual = confirmed.groupby('is_china').sum()
summed_atual['delta_1'] = summed['6/14/21'] - summed['6/13/21']
summed_atual['delta_1'].plot(kind = 'bar', figsize = (12, 6))
plt.title('Novos casos confirmados na China e no resto do mundo no dia 6/14/21.', fontsize = 18)
plt.xticks([False, True], ['Mundo', 'China'], rotation = 0)
plt.show()

# DF summed transposto
summed.T.head()

# crescimento no mundo e na china
summed.T[2:60].plot(figsize = (12, 6))   # limitando o gráfico
plt.legend(['Mundo', 'China'])
plt.title('Casos confirmados na China e no Mundo ao longo do tempo', fontsize = 20)
plt.show()

# diferença excluindo [latitude, longitude] : [is_us e delta] 
differences = summed.T[2:60].diff()  # no curso filtra [2:-2]
differences.head()

# gráfico dos casos novos
differences.dropna().plot(figsize = (12, 6))  # dropna() para retirar os nulos
plt.title('Novos casos diários na China e no Mundo', fontsize = 20)
plt.legend(['Mundo', 'China'])
plt.show()

# taxa de incidência calculada no dia 3/2/20
# maneira ERRADA de calcular, pois estamos usando toda a população da China
cases = confirmed.groupby('is_china').sum()['3/2/20'].loc[True]
estimated_population = 1437525528
incidence_ratio = cases / estimated_population * 100000   # a cada 100.000 habitantes
incidence_ratio

# lendo arquivo da United NAtions sobre a população mundial em 2019
un_population = pd.read_csv('https://population.un.org/wpp/Download/Files/1_Indicators%20(Standard)/CSV_FILES/WPP2019_TotalPopulationBySex.csv')
un_population['PopTotal'] = un_population['PopTotal'] * 1000  # os dados estavam em milhares, colocamos para a quantidade de habitantes
un_population.head()

un_population.describe()

# apenas a população total em 2019
un_population_total = un_population.query('Time == 2019')[['Location', 'PopTotal']].set_index('Location')
un_population_total.head()

# un_population.query('Time == 2019 and Location == "Brazil"')

# join nos DataFrames, nesse caso inserimos apenas a coluna PopTotal no combined
combined.join(un_population_total)

# neste caso, conseguimos dar join na China (objetivo do curso)
# porém, no curso antes era 'Mainland China', logo o join foi mal sucedido
combined.join(un_population_total).sort_values('confirmed', ascending = False).loc['China']

"""### Procedimento do Curso, Mainland China != China."""

# .str.contains() para identificar todas Locations com China incluso
# un_population.query('Location.str.contains("China") and Time == 2019', engine = 'python')

# .str.contains() para identificar todas Locations com Russia incluso
un_population.query('Location.str.contains("Russia") and Time == 2019', engine = 'python')

# .str.contains() para identificar todas Locations com Iran incluso
un_population.query('Location.str.contains("Iran") and Time == 2019', engine = 'python')

# .str.contains() para identificar todas Locations com Us incluso
un_population.query('Location.str.contains("United States") and Time == 2019', engine = 'python')

# assumindo algumas premissas
# estamos assumindo que na UN China = John Hopkins Mainland China

# def rename_location(location):
#   if location == 'China':
#     return 'Mainland China'
#   return location

# un_population_total['location_for_who'] = un_population_total.index.map(rename_location)

# un_population_total.query('location_for_who == "Mainland China"')

# alterando outros nomes
def rename_location(location):
  if location == 'Russian Federation':
    return 'Russia'
  if location == 'Iran (Islamic Republic of)':
    return 'Iran'
  if location == 'United States of America':
    return 'US'
  return location

un_population_total['location_for_who'] = un_population_total.index.map(rename_location)

# inserindo o índice no DT
un_population_total = un_population_total.set_index('location_for_who')

# combined.join(un_population_total.sort_values('confirmed', ascending = False))

"""### Acima seria o código de alteração de China para Mainland China
### Adicionando uma nova coluna 'location_for_who' e inserindo essa informação
"""

combined_expanded = combined.join(un_population_total).sort_values('confirmed', ascending = False).dropna()
combined_expanded.head(20)

# criando coluna com taxa de incidência por 100.000 habitantes
# criando coluna com taxa de mortalidade por 100.000 habitantes
# apenas para quantidade de gente testadas e considerando TODA a população
combined_expanded['incidence_ratio'] = (combined_expanded['confirmed'] / combined_expanded['PopTotal']) * 100000
combined_expanded['mortality_rate'] = (combined_expanded['deaths'] / combined_expanded['PopTotal']) * 100000
combined_expanded.head(20)

recovered.set_index('Country/Region').loc['France']

# nos EUA de acordo com o Burden Report de influenza 2018/2019, estimativa não final
# de acordo com as HOSPITALIZAÇÕES 
letality_rate_hospitalization = 34157 / 490561 * 100

print(f'Taxa de letalidade por hospitalização nos EUA em 2018-2019: {letality_rate_hospitalization}%')

# nos EUA de acordo com o Burden Report de influenza 2018/2019, estimativa não final
# de acordo com as VISTIAS MÉDICAS
letality_rate_medical_visit = 34157 / 16520350 * 100

print(f'Taxa de letalidade por visitas médicas nos EUA em 2018-2019: {letality_rate_medical_visit}%')

# nos EUA de acordo com o Burden Report de influenza 2018/2019, estimativa não final
# de acordo com os SINTOMÁTICOS
letality_rate_symptomatic = 34157 / 35520883 * 100

print(f'Taxa de letalidade por sintomáticos nos EUA em 2018-2019: {letality_rate_symptomatic}%')

# coeficientes de incidência nos EUA, Burden Report, incluenza
incidence_ratio_us = 35520883 / 329450000 * 100000
mortality_rate_us = 34157 / 329450000 * 100000

print(f'Coeficiente de INCIDÊNCIA de influenza nos EUA em 2018-2019 por 100.000 habitantes: {incidence_ratio_us}')
print(f'Coeficiente de MORTALIDADE de influenza nos EUA em 2018-2019 por 100.000 habitantes: {mortality_rate_us}')

confirmed.sum()[3:-2]

# criando um Data Frame com os confirmados, recuperados e mortos
grouped_per_day = pd.DataFrame([confirmed.sum()[3:-2], recovered.sum()[3:], deaths.sum()[3:]], index = ['confirmed', 'recovered', 'deaths']).T
grouped_per_day.head()

# calculando a taxa de letalidade das duas maneiras e inserindo no DF
grouped_per_day['letality_rate_1'] = 100 *grouped_per_day['deaths'] / grouped_per_day['confirmed']
grouped_per_day['letality_rate_2'] = 100 * grouped_per_day['deaths'] / (grouped_per_day['deaths'] + grouped_per_day['recovered'])
grouped_per_day.head()

ax1 = grouped_per_day['letality_rate_1'].plot(figsize = (12, 6))
ax2 = grouped_per_day['letality_rate_2'].plot(figsize = (12, 6))
plt.title('Taxa de Letalidade no mundo convergindo para o mesmo valor', fontsize = 20)
ax1.set_xlabel('Fonte: Curso www.alura.com.br e Dados Johns Hopkins https://github.com/CSSEGISandData/COVID-19', fontsize = 12)
ax1.set_ylabel('Porcentagem (%)', fontsize = 14)
plt.legend(['Mortes / Casos confirmados', 'Mortes / (Mortes + Recuperados)'])
plt.grid(linestyle = '--')
plt.show()